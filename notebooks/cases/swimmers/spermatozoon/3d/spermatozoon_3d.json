{
    "Name": "Rama-Ahmadi swimmer",
    "ShortName":"RA swimmer",
    "Models":
    {
	    "equations":"Stokes"
    },
    "Parameters":
    {
	    "ubar":"0",
        "dx":"0",
        "dy":"0",
        "pi":"3.1415",
        "period":"0.3", // second
        "lambda":"20", // micrometers
        "head_junct":"20",
        "tail_L":"50",
        "A_max":"2",
        "offset":"0"
    },
    "Materials":
    {
	    "Fluid":{
            "physics":"fluid",
	        "rho":"1.0e-9", // All the mesh units are in micrometers; as a result I put these constants in micrometers too
	        "mu":"1e-3"//.524e3"     // I use also micrograms -> density [micrograms/(micrometer)^3; mu [micrograms/(micrometers*second)]
	    },
        "MySolid":{
            "markers":["Swimmer"],
            "physics":"body",
            "rho":"1.0e-9"
        }
    },
    "BoundaryConditions":
    {
	    "velocity":
	    {
	        "Dirichlet":
	        {
		        "Walls":
		        {
		            "expr":"{0,0,0}"
		        }
	        }/*,
	        "interface_fsi":
	        {
		        "Head":
		        {
		            "expr":"0"
		        },
		        "Tail":
		        {
		            "expr":"0"
		        }
	        }*/
	    },
	    "fluid":
	    {
	        "outlet":
	        {
		        "Outlet":
		        {
		            "expr":"0"
		        },
		        "Inlet":
		        {
		            "expr":"0"
		        }
            },
            "body":
            {
                "Swimmer":
                {
                    "markers":["Head","Tail"],
                    "materials":
                    {
                        "names":"MySolid"
                    },
                    //"translational-velocity":"{0,0}",
                    "elastic-velocity":
                    {
                        "onTail":
                        {
                            //"expr":"{(1-exp(-t))*A_max^2*(x-head_junct)^2/(tail_L^2)*(pi^2/lambda)/period*cos(4*pi*(t/period-(x+offset)/lambda)),(1-exp(-t))*A_max*(x-head_junct)/tail_L*2*pi/period*cos(2*pi*(t/period-(x+offset)/lambda))}:x:t:lambda:period:pi:tail_L:head_junct:A_max:offset",// t*(x-head_junct)^2/tail_L^2*(pi/lambda)*1/4*sin(4*pi*(t/period-x/lambda)), t*(x-head_junct)/tail_L*sin(2*pi*(t/period-x/lambda))}:t:x:period:lambda:head_junct:tail_L",

                            "expr":"{(1-exp(-t))*A_max^2*(bdrydisp_X-head_junct)^2/(tail_L^2)*(pi^2/lambda)/period*cos(4*pi*(t/period-(bdrydisp_X+offset)/lambda)),(1-exp(-t))*A_max*(bdrydisp_X-head_junct)/tail_L*2*pi/period*cos(2*pi*(t/period-(bdrydisp_X+offset)/lambda)),0}:x:t:lambda:period:pi:tail_L:head_junct:A_max:offset:bdrydisp_X:bdrydisp_Y:bdrydisp_Z",// t*(x-head_junct)^2/tail_L^2*(pi/lambda)*1/4*sin(4*pi*(t/period-x/lambda)), t*(x-head_junct)/tail_L*sin(2*pi*(t/period-x/lambda))}:t:x:period:lambda:head_junct:tail_L",
                            "markers":"Tail"
                        }
                //"Head":{"expr":"{dx,dy}:dx:dy"},
                //"Tail":{"expr":"{dx + t*(x-head_junct)^2/tail_L^2*(pi/lambda)*1/4*sin(4*pi*(t/period-x/lambda)), dy + t*(x-head_junct)/tail_L*sin(2*pi*(t/period-x/lambda))}:t:x:dx:dy:period:lambda:head_junct:tail_L"}//"{dx,dy+sin(x)-y}:x:y:dx:dy"}//:
	                }
                }
            }
        }
    },
    "PostProcess":
    {
	    "Exports":
	    {
	        "fields":["velocity","pressure","pid","displacement"]
	    },
	    "Measures":
	    {
            "Forces":"Head",
            "Quantities":
            {
                "names":"all"
            }
	    }
    }
    
}
